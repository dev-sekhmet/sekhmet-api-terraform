name: Deploy On AWS

on:
  workflow_dispatch:
    inputs:
      Environment:
        description: 'Environment to deploy'
        required: true
        default: 'test'
      App_version:
        description: 'App version'
        required: true
        default: '0.0.2'
      repo_jfrog:
        description: 'repo jfrog'
        required: true
        default: 'snapshot'
env:
  AWS_ACCESS_KEY_ID : ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_DEFAULT_REGION : ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  check-pr:
    runs-on: ubuntu-latest
    name: Create a plan terraform configuration
    env:
      GITHUB_TOKEN: ${{ secrets.GIT_CI_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: terraform format
        uses: dflook/terraform-fmt@v1

      - name: terraform validate
        uses: dflook/terraform-validate@v1

      - name: terraform plan
        id: plan
        uses: dflook/terraform-plan@v1
        with:
          variables: |
            artifactory_url="https://sekhmet.jfrog.io/"
            artifactory_username="${{ secrets.JFROG_USER }}"
            artifactory_password="${{ secrets.JFROG_PASSWORD }}"
            artifactory_repo="sekhmet-api-libs-${{ github.event.inputs.repo_jfrog }}"

            app_version="${{ github.event.inputs.App_version }}"
            environment_suffix="${{ github.event.inputs.Environment }}"

            app_env_SERVER_PORT="${{ secrets.SERVER_PORT }}"
            app_env_SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}"
            app_env_SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}"
            app_env_SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}"
            app_env_SPRING_ELASTICSEARCH_REST_URIS="${{ secrets.SPRING_ELASTICSEARCH_REST_URIS }}"
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GIT_CI_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: terraform apply
        uses: dflook/terraform-apply@v1